/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TurnTablePositionService } from "../turnTablePosition.service";
import { TurnTablePositionCreateInput } from "./TurnTablePositionCreateInput";
import { TurnTablePosition } from "./TurnTablePosition";
import { TurnTablePositionFindManyArgs } from "./TurnTablePositionFindManyArgs";
import { TurnTablePositionWhereUniqueInput } from "./TurnTablePositionWhereUniqueInput";
import { TurnTablePositionUpdateInput } from "./TurnTablePositionUpdateInput";

export class TurnTablePositionControllerBase {
  constructor(protected readonly service: TurnTablePositionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TurnTablePosition })
  async createTurnTablePosition(
    @common.Body() data: TurnTablePositionCreateInput
  ): Promise<TurnTablePosition> {
    return await this.service.createTurnTablePosition({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TurnTablePosition] })
  @ApiNestedQuery(TurnTablePositionFindManyArgs)
  async turnTablePositions(
    @common.Req() request: Request
  ): Promise<TurnTablePosition[]> {
    const args = plainToClass(TurnTablePositionFindManyArgs, request.query);
    return this.service.turnTablePositions({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TurnTablePosition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async turnTablePosition(
    @common.Param() params: TurnTablePositionWhereUniqueInput
  ): Promise<TurnTablePosition | null> {
    const result = await this.service.turnTablePosition({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TurnTablePosition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTurnTablePosition(
    @common.Param() params: TurnTablePositionWhereUniqueInput,
    @common.Body() data: TurnTablePositionUpdateInput
  ): Promise<TurnTablePosition | null> {
    try {
      return await this.service.updateTurnTablePosition({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TurnTablePosition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTurnTablePosition(
    @common.Param() params: TurnTablePositionWhereUniqueInput
  ): Promise<TurnTablePosition | null> {
    try {
      return await this.service.deleteTurnTablePosition({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
