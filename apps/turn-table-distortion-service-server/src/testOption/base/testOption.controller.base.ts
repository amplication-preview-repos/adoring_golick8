/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TestOptionService } from "../testOption.service";
import { TestOptionCreateInput } from "./TestOptionCreateInput";
import { TestOption } from "./TestOption";
import { TestOptionFindManyArgs } from "./TestOptionFindManyArgs";
import { TestOptionWhereUniqueInput } from "./TestOptionWhereUniqueInput";
import { TestOptionUpdateInput } from "./TestOptionUpdateInput";

export class TestOptionControllerBase {
  constructor(protected readonly service: TestOptionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TestOption })
  async createTestOption(
    @common.Body() data: TestOptionCreateInput
  ): Promise<TestOption> {
    return await this.service.createTestOption({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TestOption] })
  @ApiNestedQuery(TestOptionFindManyArgs)
  async testOptions(@common.Req() request: Request): Promise<TestOption[]> {
    const args = plainToClass(TestOptionFindManyArgs, request.query);
    return this.service.testOptions({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TestOption })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async testOption(
    @common.Param() params: TestOptionWhereUniqueInput
  ): Promise<TestOption | null> {
    const result = await this.service.testOption({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TestOption })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTestOption(
    @common.Param() params: TestOptionWhereUniqueInput,
    @common.Body() data: TestOptionUpdateInput
  ): Promise<TestOption | null> {
    try {
      return await this.service.updateTestOption({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TestOption })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTestOption(
    @common.Param() params: TestOptionWhereUniqueInput
  ): Promise<TestOption | null> {
    try {
      return await this.service.deleteTestOption({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
