/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Measurements as PrismaMeasurements } from "@prisma/client";

export class MeasurementsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MeasurementsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.measurements.count(args);
  }

  async measurementsItems(
    args: Prisma.MeasurementsFindManyArgs
  ): Promise<PrismaMeasurements[]> {
    return this.prisma.measurements.findMany(args);
  }
  async measurements(
    args: Prisma.MeasurementsFindUniqueArgs
  ): Promise<PrismaMeasurements | null> {
    return this.prisma.measurements.findUnique(args);
  }
  async createMeasurements(
    args: Prisma.MeasurementsCreateArgs
  ): Promise<PrismaMeasurements> {
    return this.prisma.measurements.create(args);
  }
  async updateMeasurements(
    args: Prisma.MeasurementsUpdateArgs
  ): Promise<PrismaMeasurements> {
    return this.prisma.measurements.update(args);
  }
  async deleteMeasurements(
    args: Prisma.MeasurementsDeleteArgs
  ): Promise<PrismaMeasurements> {
    return this.prisma.measurements.delete(args);
  }
}
