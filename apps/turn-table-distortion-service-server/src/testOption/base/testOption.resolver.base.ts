/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TestOption } from "./TestOption";
import { TestOptionCountArgs } from "./TestOptionCountArgs";
import { TestOptionFindManyArgs } from "./TestOptionFindManyArgs";
import { TestOptionFindUniqueArgs } from "./TestOptionFindUniqueArgs";
import { DeleteTestOptionArgs } from "./DeleteTestOptionArgs";
import { TestOptionService } from "../testOption.service";
@graphql.Resolver(() => TestOption)
export class TestOptionResolverBase {
  constructor(protected readonly service: TestOptionService) {}

  async _testOptionsMeta(
    @graphql.Args() args: TestOptionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TestOption])
  async testOptions(
    @graphql.Args() args: TestOptionFindManyArgs
  ): Promise<TestOption[]> {
    return this.service.testOptions(args);
  }

  @graphql.Query(() => TestOption, { nullable: true })
  async testOption(
    @graphql.Args() args: TestOptionFindUniqueArgs
  ): Promise<TestOption | null> {
    const result = await this.service.testOption(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TestOption)
  async deleteTestOption(
    @graphql.Args() args: DeleteTestOptionArgs
  ): Promise<TestOption | null> {
    try {
      return await this.service.deleteTestOption(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
