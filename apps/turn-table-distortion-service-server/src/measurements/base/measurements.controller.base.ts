/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MeasurementsService } from "../measurements.service";
import { MeasurementsCreateInput } from "./MeasurementsCreateInput";
import { Measurements } from "./Measurements";
import { MeasurementsFindManyArgs } from "./MeasurementsFindManyArgs";
import { MeasurementsWhereUniqueInput } from "./MeasurementsWhereUniqueInput";
import { MeasurementsUpdateInput } from "./MeasurementsUpdateInput";

export class MeasurementsControllerBase {
  constructor(protected readonly service: MeasurementsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Measurements })
  async createMeasurements(
    @common.Body() data: MeasurementsCreateInput
  ): Promise<Measurements> {
    return await this.service.createMeasurements({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Measurements] })
  @ApiNestedQuery(MeasurementsFindManyArgs)
  async measurementsItems(
    @common.Req() request: Request
  ): Promise<Measurements[]> {
    const args = plainToClass(MeasurementsFindManyArgs, request.query);
    return this.service.measurementsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Measurements })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async measurements(
    @common.Param() params: MeasurementsWhereUniqueInput
  ): Promise<Measurements | null> {
    const result = await this.service.measurements({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Measurements })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMeasurements(
    @common.Param() params: MeasurementsWhereUniqueInput,
    @common.Body() data: MeasurementsUpdateInput
  ): Promise<Measurements | null> {
    try {
      return await this.service.updateMeasurements({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Measurements })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMeasurements(
    @common.Param() params: MeasurementsWhereUniqueInput
  ): Promise<Measurements | null> {
    try {
      return await this.service.deleteMeasurements({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
