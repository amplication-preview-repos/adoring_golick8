/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OutputFilenameService } from "../outputFilename.service";
import { OutputFilenameCreateInput } from "./OutputFilenameCreateInput";
import { OutputFilename } from "./OutputFilename";
import { OutputFilenameFindManyArgs } from "./OutputFilenameFindManyArgs";
import { OutputFilenameWhereUniqueInput } from "./OutputFilenameWhereUniqueInput";
import { OutputFilenameUpdateInput } from "./OutputFilenameUpdateInput";

export class OutputFilenameControllerBase {
  constructor(protected readonly service: OutputFilenameService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OutputFilename })
  async createOutputFilename(
    @common.Body() data: OutputFilenameCreateInput
  ): Promise<OutputFilename> {
    return await this.service.createOutputFilename({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [OutputFilename] })
  @ApiNestedQuery(OutputFilenameFindManyArgs)
  async outputFilenames(
    @common.Req() request: Request
  ): Promise<OutputFilename[]> {
    const args = plainToClass(OutputFilenameFindManyArgs, request.query);
    return this.service.outputFilenames({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OutputFilename })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async outputFilename(
    @common.Param() params: OutputFilenameWhereUniqueInput
  ): Promise<OutputFilename | null> {
    const result = await this.service.outputFilename({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OutputFilename })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOutputFilename(
    @common.Param() params: OutputFilenameWhereUniqueInput,
    @common.Body() data: OutputFilenameUpdateInput
  ): Promise<OutputFilename | null> {
    try {
      return await this.service.updateOutputFilename({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OutputFilename })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOutputFilename(
    @common.Param() params: OutputFilenameWhereUniqueInput
  ): Promise<OutputFilename | null> {
    try {
      return await this.service.deleteOutputFilename({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
